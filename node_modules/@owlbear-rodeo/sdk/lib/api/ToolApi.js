var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { normalizeIconPaths } from "../common/normalize";
class ToolApi {
    constructor(messageBus) {
        this.tools = {};
        this.toolActions = {};
        this.toolModes = {};
        this.handleToolClick = (event) => {
            const tool = this.tools[event.id];
            if (tool) {
                if (tool.onClick) {
                    const result = tool.onClick(event.context, event.elementId);
                    Promise.resolve(result).then((activate) => {
                        if (activate) {
                            this.messageBus.send("OBR_TOOL_ACTIVATE", {
                                id: event.id,
                            });
                        }
                    });
                }
                else {
                    this.messageBus.send("OBR_TOOL_ACTIVATE", {
                        id: event.id,
                    });
                }
            }
        };
        this.handleToolActionClick = (event) => {
            var _a;
            const action = this.toolActions[event.id];
            if (action) {
                (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action, event.context, event.elementId);
            }
        };
        this.handleToolModeClick = (event) => {
            const mode = this.toolModes[event.id];
            if (mode) {
                if (mode.onClick) {
                    const result = mode.onClick(event.context, event.elementId);
                    Promise.resolve(result).then((activate) => {
                        if (activate) {
                            this.messageBus.send("OBR_TOOL_MODE_ACTIVATE", {
                                toolId: event.context.activeTool,
                                modeId: event.id,
                            });
                        }
                    });
                }
                else {
                    this.messageBus.send("OBR_TOOL_MODE_ACTIVATE", {
                        toolId: event.context.activeTool,
                        modeId: event.id,
                    });
                }
            }
        };
        this.handleToolModeToolClick = (event) => {
            const mode = this.toolModes[event.id];
            if (mode) {
                if (mode.onToolClick) {
                    const result = mode.onToolClick(event.context, event.event);
                    Promise.resolve(result).then((select) => {
                        if (select && event.event.target && !event.event.target.locked) {
                            this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
                                items: [event.event.target.id],
                            });
                        }
                    });
                }
                else {
                    if (event.event.target && !event.event.target.locked) {
                        this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
                            items: [event.event.target.id],
                        });
                    }
                }
            }
        };
        this.handleToolModeToolDoubleClick = (event) => {
            const mode = this.toolModes[event.id];
            if (mode) {
                if (mode.onToolDoubleClick) {
                    const result = mode.onToolDoubleClick(event.context, event.event);
                    Promise.resolve(result).then((select) => {
                        if (select && event.event.target) {
                            this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
                                items: [event.event.target.id],
                            });
                        }
                    });
                }
                else {
                    if (event.event.target) {
                        this.messageBus.sendAsync("OBR_PLAYER_SELECT", {
                            items: [event.event.target.id],
                        });
                    }
                }
            }
        };
        this.handleToolModeToolDown = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolDown) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeToolMove = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolMove) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeToolUp = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolUp) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeToolDragStart = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolDragStart) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeToolDragMove = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolDragMove) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeToolDragEnd = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolDragEnd) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeToolDragCancel = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onToolDragCancel) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeKeyDown = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.handleToolModeKeyUp = (event) => {
            var _a;
            const mode = this.toolModes[event.id];
            if (mode) {
                (_a = mode.onKeyUp) === null || _a === void 0 ? void 0 : _a.call(mode, event.context, event.event);
            }
        };
        this.messageBus = messageBus;
        messageBus.on("OBR_TOOL_EVENT_CLICK", this.handleToolClick);
        messageBus.on("OBR_TOOL_ACTION_EVENT_CLICK", this.handleToolActionClick);
        messageBus.on("OBR_TOOL_MODE_EVENT_CLICK", this.handleToolModeClick);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_CLICK", this.handleToolModeToolClick);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_DOUBLE_CLICK", this.handleToolModeToolDoubleClick);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_DOWN", this.handleToolModeToolDown);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_MOVE", this.handleToolModeToolMove);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_UP", this.handleToolModeToolUp);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_START", this.handleToolModeToolDragStart);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_MOVE", this.handleToolModeToolDragMove);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_END", this.handleToolModeToolDragEnd);
        messageBus.on("OBR_TOOL_MODE_EVENT_TOOL_DRAG_CANCEL", this.handleToolModeToolDragCancel);
        messageBus.on("OBR_TOOL_MODE_EVENT_KEY_DOWN", this.handleToolModeKeyDown);
        messageBus.on("OBR_TOOL_MODE_EVENT_KEY_UP", this.handleToolModeKeyUp);
    }
    create(tool) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_CREATE", {
                id: tool.id,
                shortcut: tool.shortcut,
                defaultMode: tool.defaultMode,
                defaultMetadata: tool.defaultMetadata,
                icons: normalizeIconPaths(tool.icons),
                disabled: tool.disabled,
            });
            this.tools[tool.id] = tool;
        });
    }
    remove(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_REMOVE", { id });
            delete this.tools[id];
        });
    }
    activateTool(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_ACTIVATE", { id });
        });
    }
    getMetadata(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const { metadata } = yield this.messageBus.sendAsync("OBR_TOOL_GET_METADATA", { id });
            return metadata;
        });
    }
    setMetadata(toolId, update) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_SET_METADATA", {
                toolId,
                update,
            });
        });
    }
    createAction(action) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_ACTION_CREATE", {
                id: action.id,
                shortcut: action.shortcut,
                icons: normalizeIconPaths(action.icons),
                disabled: action.disabled,
            });
            this.toolActions[action.id] = action;
        });
    }
    removeAction(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_ACTION_REMOVE", { id });
            delete this.tools[id];
        });
    }
    createMode(mode) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_MODE_CREATE", {
                id: mode.id,
                shortcut: mode.shortcut,
                icons: normalizeIconPaths(mode.icons),
                preventDrag: mode.preventDrag,
                disabled: mode.disabled,
                cursors: mode.cursors,
            });
            this.toolModes[mode.id] = mode;
        });
    }
    removeMode(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_MODE_REMOVE", { id });
            delete this.tools[id];
        });
    }
    activateMode(toolId, modeId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_TOOL_MODE_ACTIVATE", {
                toolId,
                modeId,
            });
        });
    }
}
export default ToolApi;
