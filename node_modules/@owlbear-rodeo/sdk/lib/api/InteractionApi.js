var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { enablePatches, produceWithPatches } from "immer";
enablePatches();
class InteractionApi {
    constructor(messageBus) {
        this.messageBus = messageBus;
    }
    startItemInteraction(baseState) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = yield this.messageBus.sendAsync("OBR_INTERACTION_START_ITEM_INTERACTION", { baseState });
            let prev = baseState;
            const dispatcher = (update) => {
                const [next, patches] = produceWithPatches(prev, update);
                prev = next;
                this.messageBus.send("OBR_INTERACTION_UPDATE_ITEM_INTERACTION", {
                    id,
                    patches,
                });
                return next;
            };
            const stop = () => {
                this.messageBus.send("OBR_INTERACTION_STOP_ITEM_INTERACTION", { id });
            };
            return [dispatcher, stop];
        });
    }
}
export default InteractionApi;
