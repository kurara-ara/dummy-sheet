var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class SceneGridApi {
    constructor(messageBus) {
        this.messageBus = messageBus;
    }
    getDpi() {
        return __awaiter(this, void 0, void 0, function* () {
            const { dpi } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_DPI", {});
            return dpi;
        });
    }
    getScale() {
        return __awaiter(this, void 0, void 0, function* () {
            const scale = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_SCALE", {});
            return scale;
        });
    }
    setScale(scale) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_SCALE", { scale });
        });
    }
    getColor() {
        return __awaiter(this, void 0, void 0, function* () {
            const { color } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_COLOR", {});
            return color;
        });
    }
    setColor(color) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_COLOR", { color });
        });
    }
    getOpacity() {
        return __awaiter(this, void 0, void 0, function* () {
            const { opacity } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_OPACITY", {});
            return opacity;
        });
    }
    setOpacity(opacity) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_OPACITY", { opacity });
        });
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            const { type } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_TYPE", {});
            return type;
        });
    }
    setType(type) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_TYPE", { type });
        });
    }
    getLineType() {
        return __awaiter(this, void 0, void 0, function* () {
            const { lineType } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_LINE_TYPE", {});
            return lineType;
        });
    }
    setLineType(lineType) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_LINE_TYPE", {
                lineType,
            });
        });
    }
    getMeasurement() {
        return __awaiter(this, void 0, void 0, function* () {
            const { measurement } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_MEASUREMENT", {});
            return measurement;
        });
    }
    setMeasurement(measurement) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_GRID_SET_MEASUREMENT", {
                measurement,
            });
        });
    }
    snapPosition(position, snappingSensitivity, useCorners) {
        return __awaiter(this, void 0, void 0, function* () {
            const { position: snapped } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_SNAP_POSITION", {
                position,
                snappingSensitivity,
                useCorners,
            });
            return snapped;
        });
    }
    getDistance(from, to) {
        return __awaiter(this, void 0, void 0, function* () {
            const { distance } = yield this.messageBus.sendAsync("OBR_SCENE_GRID_GET_DISTANCE", { from, to });
            return distance;
        });
    }
    onChange(callback) {
        const handleChange = (data) => {
            callback(data.grid);
        };
        this.messageBus.send("OBR_SCENE_GRID_SUBSCRIBE", {});
        this.messageBus.on("OBR_SCENE_GRID_EVENT_CHANGE", handleChange);
        return () => {
            this.messageBus.send("OBR_SCENE_GRID_UNSUBSCRIBE", {});
            this.messageBus.off("OBR_SCENE_GRID_EVENT_CHANGE", handleChange);
        };
    }
}
export default SceneGridApi;
