import MessageBus from "../../messages/MessageBus";
import { BoundingBox } from "../../types/BoundingBox";
import { ItemFilter } from "../../types/ItemFilter";
import { Item } from "../../types/items/Item";
import { WritableDraft } from "immer/dist/internal";
declare class SceneLocalApi {
    private messageBus;
    constructor(messageBus: MessageBus);
    getItems<ItemType extends Item>(filter?: ItemFilter<ItemType>): Promise<ItemType[]>;
    updateItems<ItemType extends Item>(filter: ItemFilter<ItemType>, update: (draft: WritableDraft<ItemType[]>) => void, fastUpdate?: boolean): Promise<void>;
    addItems(items: Item[]): Promise<void>;
    deleteItems(ids: string[]): Promise<void>;
    getItemAttachments(ids: string[]): Promise<Item[]>;
    getItemBounds(ids: string[]): Promise<BoundingBox>;
    onChange(callback: (items: Item[]) => void): () => void;
}
export default SceneLocalApi;
