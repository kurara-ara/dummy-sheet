var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class SceneFogApi {
    constructor(messageBus) {
        this.messageBus = messageBus;
    }
    getColor() {
        return __awaiter(this, void 0, void 0, function* () {
            const { color } = yield this.messageBus.sendAsync("OBR_SCENE_FOG_GET_COLOR", {});
            return color;
        });
    }
    setColor(color) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_FOG_SET_COLOR", { color });
        });
    }
    getStrokeWidth() {
        return __awaiter(this, void 0, void 0, function* () {
            const { strokeWidth } = yield this.messageBus.sendAsync("OBR_SCENE_FOG_GET_STROKE_WIDTH", {});
            return strokeWidth;
        });
    }
    setStrokeWidth(strokeWidth) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_FOG_SET_STROKE_WIDTH", {
                strokeWidth,
            });
        });
    }
    getFilled() {
        return __awaiter(this, void 0, void 0, function* () {
            const { filled } = yield this.messageBus.sendAsync("OBR_SCENE_FOG_GET_FILLED", {});
            return filled;
        });
    }
    setFilled(filled) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_FOG_SET_FILLED", { filled });
        });
    }
    onChange(callback) {
        const handleChange = (data) => {
            callback(data.fog);
        };
        this.messageBus.send("OBR_SCENE_FOG_SUBSCRIBE", {});
        this.messageBus.on("OBR_SCENE_FOG_EVENT_CHANGE", handleChange);
        return () => {
            this.messageBus.send("OBR_SCENE_FOG_UNSUBSCRIBE", {});
            this.messageBus.off("OBR_SCENE_FOG_EVENT_CHANGE", handleChange);
        };
    }
}
export default SceneFogApi;
