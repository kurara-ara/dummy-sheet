var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { enablePatches, produceWithPatches } from "immer";
enablePatches();
class SceneItemsApi {
    constructor(messageBus) {
        this.messageBus = messageBus;
    }
    getItems(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Array.isArray(filter)) {
                const { items } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ITEMS", { ids: filter });
                return items;
            }
            else if (filter) {
                const { items } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ALL_ITEMS", {});
                return items.filter(filter);
            }
            else {
                const { items } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ALL_ITEMS", {});
                return items;
            }
        });
    }
    isItemArray(value) {
        return (Array.isArray(value) && value.every((item) => typeof item !== "string"));
    }
    updateItems(filterOrItems, update) {
        return __awaiter(this, void 0, void 0, function* () {
            let items;
            if (this.isItemArray(filterOrItems)) {
                items = filterOrItems;
            }
            else {
                items = yield this.getItems(filterOrItems);
            }
            const [nextState, patches] = produceWithPatches(items, update);
            const updates = nextState.map((item) => ({
                id: item.id,
                type: item.type,
            }));
            // Use patches to get the partial update keys
            for (const patch of patches) {
                const [index, key] = patch.path;
                if (typeof index === "number" && typeof key === "string") {
                    updates[index][key] = nextState[index][key];
                }
            }
            yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_UPDATE_ITEMS", {
                updates,
            });
        });
    }
    addItems(items) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_ADD_ITEMS", {
                items,
            });
        });
    }
    deleteItems(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_DELETE_ITEMS", {
                ids,
            });
        });
    }
    getItemAttachments(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const { items } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ITEM_ATTACHMENTS", { ids });
            return items;
        });
    }
    getItemBounds(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const { bounds } = yield this.messageBus.sendAsync("OBR_SCENE_ITEMS_GET_ITEM_BOUNDS", { ids });
            return bounds;
        });
    }
    onChange(callback) {
        const handleChange = (data) => {
            callback(data.items);
        };
        this.messageBus.send("OBR_SCENE_ITEMS_SUBSCRIBE", {});
        this.messageBus.on("OBR_SCENE_ITEMS_EVENT_CHANGE", handleChange);
        return () => {
            this.messageBus.send("OBR_SCENE_ITEMS_UNSUBSCRIBE", {});
            this.messageBus.off("OBR_SCENE_ITEMS_EVENT_CHANGE", handleChange);
        };
    }
}
export default SceneItemsApi;
