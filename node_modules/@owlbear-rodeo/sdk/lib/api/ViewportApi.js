var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ViewportApi {
    constructor(messageBus) {
        this.messageBus = messageBus;
    }
    reset() {
        return __awaiter(this, void 0, void 0, function* () {
            const { transform } = yield this.messageBus.sendAsync("OBR_VIEWPORT_RESET", {});
            return transform;
        });
    }
    animateTo(transform) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_VIEWPORT_ANIMATE_TO", { transform });
        });
    }
    animateToBounds(bounds) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_VIEWPORT_ANIMATE_TO_BOUNDS", {
                bounds,
            });
        });
    }
    getPosition() {
        return __awaiter(this, void 0, void 0, function* () {
            const { position } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_POSITION", {});
            return position;
        });
    }
    setPosition(position) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_VIEWPORT_SET_POSITION", { position });
        });
    }
    getScale() {
        return __awaiter(this, void 0, void 0, function* () {
            const { scale } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_SCALE", {});
            return scale;
        });
    }
    setScale(scale) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_VIEWPORT_SET_SCALE", { scale });
        });
    }
    getWidth() {
        return __awaiter(this, void 0, void 0, function* () {
            const { width } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_WIDTH", {});
            return width;
        });
    }
    getHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            const { height } = yield this.messageBus.sendAsync("OBR_VIEWPORT_GET_HEIGHT", {});
            return height;
        });
    }
    transformPoint(point) {
        return __awaiter(this, void 0, void 0, function* () {
            const { point: transformed } = yield this.messageBus.sendAsync("OBR_VIEWPORT_TRANSFORM_POINT", { point });
            return transformed;
        });
    }
    inverseTransformPoint(point) {
        return __awaiter(this, void 0, void 0, function* () {
            const { point: transformed } = yield this.messageBus.sendAsync("OBR_VIEWPORT_INVERSE_TRANSFORM_POINT", { point });
            return transformed;
        });
    }
}
export default ViewportApi;
