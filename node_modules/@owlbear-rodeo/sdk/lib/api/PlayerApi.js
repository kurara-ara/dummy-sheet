var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class PlayerApi {
    constructor(messageBus) {
        this.messageBus = messageBus;
    }
    get id() {
        // Get the user id from the message bus which will be populated once OBR_READY is handled
        if (!this.messageBus.userId) {
            throw Error("Unable to get user ID: not ready");
        }
        return this.messageBus.userId;
    }
    getSelection() {
        return __awaiter(this, void 0, void 0, function* () {
            const { selection } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_SELECTION", {});
            return selection;
        });
    }
    select(items, replace) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_PLAYER_SELECT", { items, replace });
        });
    }
    deselect(items) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_PLAYER_DESELECt", { items });
        });
    }
    getName() {
        return __awaiter(this, void 0, void 0, function* () {
            const { name } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_NAME", {});
            return name;
        });
    }
    setName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_PLAYER_SET_NAME", { name });
        });
    }
    getColor() {
        return __awaiter(this, void 0, void 0, function* () {
            const { color } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_COLOR", {});
            return color;
        });
    }
    setColor(color) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_PLAYER_SET_COLOR", { color });
        });
    }
    getSyncView() {
        return __awaiter(this, void 0, void 0, function* () {
            const { syncView } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_SYNC_VIEW", {});
            return syncView;
        });
    }
    setSyncView(syncView) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_PLAYER_SET_SYNC_VIEW", { syncView });
        });
    }
    getId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_ID", {});
            return id;
        });
    }
    getRole() {
        return __awaiter(this, void 0, void 0, function* () {
            const { role } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_ROLE", {});
            return role;
        });
    }
    getMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            const { metadata } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_METADATA", {});
            return metadata;
        });
    }
    setMetadata(update) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageBus.sendAsync("OBR_PLAYER_SET_METADATA", { update });
        });
    }
    hasPermission(permission) {
        return __awaiter(this, void 0, void 0, function* () {
            const role = yield this.getRole();
            if (role === "GM") {
                return true;
            }
            const { permissions } = yield this.messageBus.sendAsync("OBR_ROOM_GET_PERMISSIONS", {});
            return permissions.indexOf(permission) === -1;
        });
    }
    getConnectionId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { connectionId } = yield this.messageBus.sendAsync("OBR_PLAYER_GET_CONNECTION_ID", {});
            return connectionId;
        });
    }
    onChange(callback) {
        const handleChange = (data) => {
            callback(data.player);
        };
        this.messageBus.send("OBR_PLAYER_SUBSCRIBE", {});
        this.messageBus.on("OBR_PLAYER_EVENT_CHANGE", handleChange);
        return () => {
            this.messageBus.send("OBR_PLAYER_UNSUBSCRIBE", {});
            this.messageBus.off("OBR_PLAYER_EVENT_CHANGE", handleChange);
        };
    }
}
export default PlayerApi;
