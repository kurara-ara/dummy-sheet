import { GenericItemBuilder } from "./GenericItemBuilder";
export class ImageBuilder extends GenericItemBuilder {
    constructor(player, image, grid) {
        super(player);
        this._image = image;
        this._grid = grid;
        this._item.name = "Image";
        this._text = {
            richText: [
                {
                    type: "paragraph",
                    children: [{ text: "" }],
                },
            ],
            plainText: "",
            style: {
                padding: 8,
                fontFamily: "Roboto",
                fontSize: 16,
                fontWeight: 400,
                textAlign: "CENTER",
                textAlignVertical: "BOTTOM",
                fillColor: "white",
                fillOpacity: 1,
                strokeColor: "white",
                strokeOpacity: 1,
                strokeWidth: 0,
                lineHeight: 1.5,
            },
            type: "PLAIN",
            width: "AUTO",
            height: "AUTO",
        };
        this._textItemType = "LABEL";
    }
    text(text) {
        this._text = text;
        return this.self();
    }
    textItemType(textItemType) {
        this._textItemType = textItemType;
        return this.self();
    }
    textWidth(width) {
        this._text.width = width;
        return this.self();
    }
    textHeight(height) {
        this._text.height = height;
        return this.self();
    }
    richText(richText) {
        this._text.richText = richText;
        return this.self();
    }
    plainText(plainText) {
        this._text.plainText = plainText;
        return this.self();
    }
    textType(textType) {
        this._text.type = textType;
        return this.self();
    }
    textPadding(padding) {
        this._text.style.padding = padding;
        return this.self();
    }
    fontFamily(fontFamily) {
        this._text.style.fontFamily = fontFamily;
        return this.self();
    }
    fontSize(fontSize) {
        this._text.style.fontSize = fontSize;
        return this.self();
    }
    fontWeight(fontWeight) {
        this._text.style.fontWeight = fontWeight;
        return this.self();
    }
    textAlign(textAlign) {
        this._text.style.textAlign = textAlign;
        return this.self();
    }
    textAlignVertical(textAlignVertical) {
        this._text.style.textAlignVertical = textAlignVertical;
        return this.self();
    }
    textFillColor(fillColor) {
        this._text.style.fillColor = fillColor;
        return this.self();
    }
    textFillOpacity(fillOpacity) {
        this._text.style.fillOpacity = fillOpacity;
        return this.self();
    }
    textStrokeColor(strokeColor) {
        this._text.style.strokeColor = strokeColor;
        return this.self();
    }
    textStrokeOpacity(strokeOpacity) {
        this._text.style.strokeOpacity = strokeOpacity;
        return this.self();
    }
    textStrokeWidth(strokeWidth) {
        this._text.style.strokeWidth = strokeWidth;
        return this.self();
    }
    textLineHeight(lineHeight) {
        this._text.style.lineHeight = lineHeight;
        return this.self();
    }
    build() {
        return Object.assign(Object.assign({}, this._item), { type: "IMAGE", image: this._image, grid: this._grid, text: this._text, textItemType: this._textItemType });
    }
}
