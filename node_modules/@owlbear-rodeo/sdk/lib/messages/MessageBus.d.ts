import { EventEmitter } from "events";
declare class MessageBus extends EventEmitter {
    ready: boolean;
    /** The user ID of the player using this extension */
    userId: string | null;
    /** The ID of the room this extension is loaded in */
    roomId: string;
    /** A reference ID used to get responses from the target  */
    private ref;
    private targetOrigin;
    constructor(origin: string, roomId: string);
    destroy(): void;
    private handleMessage;
    /**
     * @param nonce
     * A nonce that will be appended to the response event ID
     * This allows concurrent calls to the same API endpoint
     * For example a call to `GET_ITEM` will respond with the `GET_ITEM_RESPONSE`
     * event. But if we make two concurrent calls to `GET_ITEM`
     * we cannot differentiate between the two `GET_ITEM_RESPONSE`
     * events. This nonce will be appended to the response so that
     * a `GET_ITEM` event called with the nonce `_123` will respond
     * with `GET_ITEM_RESPONSE_123`.
     */
    send: (id: string, data: unknown, nonce?: string) => void;
    sendAsync: <ReturnValue>(id: string, data: unknown, timeout?: number) => Promise<ReturnValue>;
}
export default MessageBus;
